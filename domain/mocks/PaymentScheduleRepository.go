// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/greekrode/loan-engine-amartha/domain"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PaymentScheduleRepository is an autogenerated mock type for the PaymentScheduleRepository type
type PaymentScheduleRepository struct {
	mock.Mock
}

// BulkCreatePaymentSchedule provides a mock function with given fields: ctx, bs, tx
func (_m *PaymentScheduleRepository) BulkCreatePaymentSchedule(ctx context.Context, bs []domain.PaymentSchedule, tx *gorm.DB) error {
	ret := _m.Called(ctx, bs, tx)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreatePaymentSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.PaymentSchedule, *gorm.DB) error); ok {
		r0 = rf(ctx, bs, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkPayPaymentSchedules provides a mock function with given fields: ctx, paymentSchedulesID, tx
func (_m *PaymentScheduleRepository) BulkPayPaymentSchedules(ctx context.Context, paymentSchedulesID []uint, tx *gorm.DB) error {
	ret := _m.Called(ctx, paymentSchedulesID, tx)

	if len(ret) == 0 {
		panic("no return value specified for BulkPayPaymentSchedules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint, *gorm.DB) error); ok {
		r0 = rf(ctx, paymentSchedulesID, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePaymentSchedule provides a mock function with given fields: ctx, bs, tx
func (_m *PaymentScheduleRepository) CreatePaymentSchedule(ctx context.Context, bs *domain.PaymentSchedule, tx *gorm.DB) error {
	ret := _m.Called(ctx, bs, tx)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PaymentSchedule, *gorm.DB) error); ok {
		r0 = rf(ctx, bs, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaymentSchedulesByLoanID provides a mock function with given fields: ctx, loanID
func (_m *PaymentScheduleRepository) GetPaymentSchedulesByLoanID(ctx context.Context, loanID uint) ([]domain.PaymentSchedule, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentSchedulesByLoanID")
	}

	var r0 []domain.PaymentSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]domain.PaymentSchedule, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []domain.PaymentSchedule); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PaymentSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnpaidPaymentSchedulesByLoanID provides a mock function with given fields: ctx, loanID, date
func (_m *PaymentScheduleRepository) GetUnpaidPaymentSchedulesByLoanID(ctx context.Context, loanID uint, date time.Time) ([]domain.PaymentSchedule, error) {
	ret := _m.Called(ctx, loanID, date)

	if len(ret) == 0 {
		panic("no return value specified for GetUnpaidPaymentSchedulesByLoanID")
	}

	var r0 []domain.PaymentSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, time.Time) ([]domain.PaymentSchedule, error)); ok {
		return rf(ctx, loanID, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, time.Time) []domain.PaymentSchedule); ok {
		r0 = rf(ctx, loanID, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PaymentSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, time.Time) error); ok {
		r1 = rf(ctx, loanID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePaymentSchedule provides a mock function with given fields: ctx, bs, tx
func (_m *PaymentScheduleRepository) UpdatePaymentSchedule(ctx context.Context, bs *domain.PaymentSchedule, tx *gorm.DB) error {
	ret := _m.Called(ctx, bs, tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PaymentSchedule, *gorm.DB) error); ok {
		r0 = rf(ctx, bs, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentScheduleRepository creates a new instance of PaymentScheduleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentScheduleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentScheduleRepository {
	mock := &PaymentScheduleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
