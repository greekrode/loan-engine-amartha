// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/greekrode/loan-engine-amartha/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// PaymentUsecase is an autogenerated mock type for the PaymentUsecase type
type PaymentUsecase struct {
	mock.Mock
}

// MakePayment provides a mock function with given fields: ctx, loanID, paymentSchedulesID, amount
func (_m *PaymentUsecase) MakePayment(ctx context.Context, loanID uint, paymentSchedulesID []uint, amount float64) error {
	ret := _m.Called(ctx, loanID, paymentSchedulesID, amount)

	if len(ret) == 0 {
		panic("no return value specified for MakePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, []uint, float64) error); ok {
		r0 = rf(ctx, loanID, paymentSchedulesID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestPayment provides a mock function with given fields: ctx, loanID
func (_m *PaymentUsecase) RequestPayment(ctx context.Context, loanID uint) (*dto.RequestPaymentResponse, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for RequestPayment")
	}

	var r0 *dto.RequestPaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*dto.RequestPaymentResponse, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *dto.RequestPaymentResponse); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RequestPaymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentUsecase creates a new instance of PaymentUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentUsecase {
	mock := &PaymentUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
