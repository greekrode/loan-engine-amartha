// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/greekrode/loan-engine-amartha/domain/dto"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// LoanUsecase is an autogenerated mock type for the LoanUsecase type
type LoanUsecase struct {
	mock.Mock
}

// CreateLoan provides a mock function with given fields: ctx, borrowerID, principal, interestRate, durationWeeks, startDate
func (_m *LoanUsecase) CreateLoan(ctx context.Context, borrowerID uint, principal float64, interestRate float64, durationWeeks int32, startDate time.Time) (*dto.CreateLoanResponse, error) {
	ret := _m.Called(ctx, borrowerID, principal, interestRate, durationWeeks, startDate)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoan")
	}

	var r0 *dto.CreateLoanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, float64, float64, int32, time.Time) (*dto.CreateLoanResponse, error)); ok {
		return rf(ctx, borrowerID, principal, interestRate, durationWeeks, startDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, float64, float64, int32, time.Time) *dto.CreateLoanResponse); ok {
		r0 = rf(ctx, borrowerID, principal, interestRate, durationWeeks, startDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateLoanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, float64, float64, int32, time.Time) error); ok {
		r1 = rf(ctx, borrowerID, principal, interestRate, durationWeeks, startDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanDetails provides a mock function with given fields: ctx, loanID
func (_m *LoanUsecase) GetLoanDetails(ctx context.Context, loanID uint) (*dto.GetLoanDetailsResponse, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanDetails")
	}

	var r0 *dto.GetLoanDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*dto.GetLoanDetailsResponse, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *dto.GetLoanDetailsResponse); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetLoanDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOutstandingAmount provides a mock function with given fields: ctx, loanID
func (_m *LoanUsecase) GetOutstandingAmount(ctx context.Context, loanID uint) (float64, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetOutstandingAmount")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (float64, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) float64); ok {
		r0 = rf(ctx, loanID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoanUsecase creates a new instance of LoanUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanUsecase {
	mock := &LoanUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
