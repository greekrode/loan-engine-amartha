// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/greekrode/loan-engine-amartha/domain"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// LoanRepository is an autogenerated mock type for the LoanRepository type
type LoanRepository struct {
	mock.Mock
}

// CreateLoan provides a mock function with given fields: ctx, loan, tx
func (_m *LoanRepository) CreateLoan(ctx context.Context, loan *domain.Loan, tx *gorm.DB) error {
	ret := _m.Called(ctx, loan, tx)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Loan, *gorm.DB) error); ok {
		r0 = rf(ctx, loan, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindLoanByID provides a mock function with given fields: ctx, loanID
func (_m *LoanRepository) FindLoanByID(ctx context.Context, loanID uint) (*domain.Loan, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for FindLoanByID")
	}

	var r0 *domain.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*domain.Loan, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *domain.Loan); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoansByBorrowerID provides a mock function with given fields: ctx, borrowerID
func (_m *LoanRepository) GetLoansByBorrowerID(ctx context.Context, borrowerID uint) ([]domain.Loan, error) {
	ret := _m.Called(ctx, borrowerID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoansByBorrowerID")
	}

	var r0 []domain.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]domain.Loan, error)); ok {
		return rf(ctx, borrowerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []domain.Loan); ok {
		r0 = rf(ctx, borrowerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, borrowerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoan provides a mock function with given fields: ctx, loan, tx
func (_m *LoanRepository) UpdateLoan(ctx context.Context, loan *domain.Loan, tx *gorm.DB) error {
	ret := _m.Called(ctx, loan, tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Loan, *gorm.DB) error); ok {
		r0 = rf(ctx, loan, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLoanRepository creates a new instance of LoanRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanRepository {
	mock := &LoanRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
